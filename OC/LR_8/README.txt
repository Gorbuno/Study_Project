Написать комплект из двух программ, одна из которых выполняет функции сервера, а вторая выполняет функции клиента.
Клиент, после установления соединения с сервером, посылает серверу запросы с периодом 1 сек, запросы нумеруются (в запросе присутствует последовательно увеливающийся на единицу номер).
Сервер принимает запросы, обрабатывает их и отправляет ответы клиенту. Под обработкой будем понимать выполнение функции, ранее выбранной для других работ из таблицы в конце методических указаний. В ответ добавляется запрос!
Клиент принимает ответы и выводит их на экран.
Необходимо использовать функции работы с сокетами без блокировки (для снятия блокировки использовать вызов: fcntl(s, F_SETFL, O_NONBLOCK);).
Необходимо поддерживать следующий порядок запросов клиента и ответов сервера:
запрос 1; ответ 1; запрос 2; ответ 2; … ; запрос i; ответ i; …
Для поддержания такого порядка, необходимо на сервере создать очередь и принимаемые запросы помещать в конец этой очереди. Затем выбирать из начала очереди запрос, обрабатывать его и отправлять ответ клиенту.
В качестве очереди можно использовать такие типы данных, как std::vector или std::queue. Например:
vector <string> msglist;
Тогда поместить в очередь запрос можно вызовом:
msglist.push_back(string(rcvbuf));
Необходимо учесть, что очередь запросов на обработку является критическим ресурсом, с которыми работают два потока (поток приема запросов и поток обработки и передачи ответов) одновременно. Поэтому работа с очередью должна производиться в режиме взаимного исключения с использованием мьютексов или семафоров. Операции захвата ресурса мьютексами или семафорами выполнять с блокировкой (pthread_mutex_lock, sem_wait).
Выбор типа сокета (AF_UNIX, AF_INET) и протокола обмена (TCP или UDP) согласовывается с преподавателем.
Функция, которая выполняется на стороне сервера, выбирается по согласованию с преподавателем из таблицы функций, представленной в конце методических указаний (можно взять ранее выбранную функцию).
В обоих случаях пишутся две программы. Каждая может быть запущена и корректно (по нажатию клавиши) завершена, если вторую не запустили.
Если обе программы запущены, то завершение по нажатию клавиши одной не должно приводить к аварийному завершению другой. См. по этому вопросу обработку сигнала SIGPIPE.

Для случая клиента, работающего без установления соединения, отсутствует поток установления соединения, а потоки передачи и приема создаются сразу после создания и инициализации сокета.
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
using namespace std;

    typedef struct{
        int flag;
        char sym;
    }targs;
    static void * proc1( void * arg){
        cout << "\nproc1 started\n";
        targs *args = (targs* ) arg;
        while (args ->flag ==0) {
            putchar (args->sym);
            fflush (stdout);
            sleep(1);
        }
        cout << "\nthe proc1 has ended\n";
        pthread_exit((void*)1);
    }
    static void * proc2( void * arg) {
        cout << "\nproc2 started\n";
        targs *args = (targs *) arg;
        while (args ->flag ==0) {
            putchar (args->sym);
            fflush (stdout);
            sleep(1);
        }
        cout << "\nthe proc2 has ended\n";
        pthread_exit((void*)2);
    }
int main() {
        cout << "\nmain started\n";
        targs arg1,arg2;
        pthread_t id1,id2;
        arg1.flag = 0;
        arg1.sym = '1';
        arg2.sym = '2';
        arg2.flag = 0;
        int * exitcode1;
        int * exitcode2;
        pthread_create(&id1, NULL, proc1, &arg1);
        pthread_create(&id2, NULL, proc2, &arg2);
        cout << "\nThe program is waiting for a keystroke\n";
        getchar();
        cout << "\nKey pressed\n";
        arg1.flag = 1;
        arg2.flag = 1;   

        pthread_join(id1, (void**)&exitcode1);
        pthread_join(id2, (void**)&exitcode2);
        cout << "exitcode1 = " << exitcode1<<endl;
        cout << "exitcode2 = " << exitcode2<<endl;
        cout << "\nthe program has ended\n";
    return 0;
}
/**
   Указания к выполнению работы
Написать программу, содержащую два потока (в дополнение к основному потоку). Каждый из потоков должен выводить определенное число на экран.
Шаблон программы представлен ниже:
       объявить флаг завершения потока 1;
       объявить флаг завершения потока 2;
       функция потока 1()
       {
           пока (флаг завершения потока 1 не установлен) делать
               {
               выводить символ ‘1’ на экран;
               задержать на время; (sleep(1);)
               }
       }
       функция потока 2()
       {
           пока (флаг завершения потока 2 не установлен) делать
               {
               выводить символ ‘2’ на экран;
               задержать на время; (sleep(1);)
               }
       }
       основная программа()
       {
           объявить идентификатор потока 1;
           объявить идентификатор потока 2;
           создать поток из функции потока 1;
           создать поток из функции потока 2;
           ждать нажатия клавиши;
           установить флаг завершения потока 1;
           установить флаг завершения потока 2;
           ждать завершения потока 1;
           ждать завершения потока 2;
       }
При запуске потоков передать в них адреса флагов завершения, при этом объявить флаги завершения локальными в функции main(), а не глобальными, как указано в шаблоне.
При завершении потоков выставить некоторые значения кодов завершения, а затем прочитать эти коды завершения в функции main() и вывести на экран.
Вопросы для самопроверки
   1. В чем состоит различие между понятиями «поток» и «процесс»?
   2. Как осуществить передачу параметров в функцию потока при создании потока?
   3. Какие способы завершения потока существуют?
   4. На какие характеристики потока можно влиять через атрибуты потока?
   5. В каких состояниях может находиться поток?
   6. Какие способы переключения задач используются в ОС?
   7. Объясните суть параметров, входящих в вызов pthread_create().
   8. Объясните суть параметров, входящих в вызов pthread_join().
   9. Опишите трассу выполнения программы.

В качестве дополнительного задания необходимо самостоятеьно изучить какую-нибудь
 (заданную преподавателем) функцию библиотеки pthread, в программе вызвать эту
 функцию и организовать вывод на экран результатов работы функции.*/
